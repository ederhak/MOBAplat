<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hitpoints = 100;
maxhp = 100;
strength = 50;
toughness = 50;
willpower = 50;
agility = 50;
grav = toughness/250; 
hsp = 0; 
vsp = 0; 
jumpSpeed = agility/toughness*4; 
moveSpeed = agility/toughness*2;
damage = 0;
team = c_fuchsia;
kAttack = 0;
color = "red";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if damage &gt; 0 {
hitpoints -= damage - 0.01*toughness/damage;
damage = 0;
}
if hitpoints &lt; 0 {
for (i = 0; i &lt; sprite_height*sprite_width/4; i++) {
create = instance_create(x-irandom_range(0,sprite_height/2), y-irandom_range(0,sprite_width/2),obj_particle);
create.team = c_fuchsia;
create.source = self;}
x = xstart;
y = ystart;
hitpoints = maxhp;
}

kLeft = -keyboard_check(vk_left); kRight = keyboard_check(vk_right); kJump = keyboard_check(vk_up); kAttack = keyboard_check(vk_numpad0);
if -kLeft + kRight - 2*kAttack == 1||-1 {sprite_index = spr_astro_walk;} else if !kAttack {sprite_index = spr_astro_stand image_speed = 1;}
if kJump sprite_index = spr_astro_jump;
if kAttack {sprite_index = spr_astro_shoot;}
if kRight { image_xscale = 1 }
if kLeft == -1 {image_xscale = -1;}

if kAttack {
if !instance_exists(obj_stab_1) {
create = instance_create(x-4*image_xscale,y-6,obj_projectile);
create.image_xscale = image_xscale;
if image_xscale {create.direction = 0} else {create.direction = 180;}
create.speed = 4;
create.source = self;
create.team = team;
create.color = color;
}
}

move = kLeft + kRight; hsp = move * moveSpeed; if (vsp &lt; 10) { vsp += grav; };

if (place_meeting(x, y + 1, obj_wall)) { vsp = kJump * -jumpSpeed}

if (place_meeting(x-move,y,obj_wall)) { vsp = kJump * -jumpSpeed}

if (place_meeting(x + hsp, y, obj_wall)) { while (!place_meeting(x + sign(hsp), y, obj_wall)) { x += sign(hsp); } hsp = 0; } x += hsp;

if (place_meeting(x, y + vsp, obj_wall)) { while (!place_meeting(x, y + sign(vsp), obj_wall)) { y += sign(vsp); } vsp = 0; } y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if kAttack {
image_speed = 0;
image_index =13;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_healthbar(x-sprite_width/2, y-8-(global.wave*3)-sprite_height/2,x+sprite_width/2-1,y-sprite_height/2-4-(global.wave*3),hitpoints/maxhp*100,global.blue,global.red,global.red,0,true,false);
draw_sprite_ext(sprite_index,image_index,x+4,y+4,image_xscale,image_yscale,0,global.red,0.5);
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
